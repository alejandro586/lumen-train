# Lumen-Train Backend

[![Node.js](https://img.shields.io/badge/Node.js-v18%2B-blue?logo=node.js)](https://nodejs.org/) [![Express](https://img.shields.io/badge/Express-4.19%2B-orange?logo=express)](https://expressjs.com/) [![Supabase](https://img.shields.io/badge/Supabase-PostgreSQL%20Backend-purple?logo=supabase)](https://supabase.com/)

Este es el **backend** para el proyecto Lumen-Train, una API ligera construida con Node.js y Express.js. Maneja el upload de archivos CSV, parsea los datos y los guarda en una base de datos Supabase (PostgreSQL gestionada). Est√° dise√±ado para integrarse con un frontend React (ver [repo principal](https://github.com/alejandro586/lumen-train)).

## Descripci√≥n
- **Funcionalidades principales:**
  - Endpoint POST `/api/upload-csv`: Sube un CSV, lo parsea y guarda datos en la tabla `usuarios` de Supabase.
  - Endpoint GET `/api/get-usuarios`: Lista los √∫ltimos registros de la DB (para verificaci√≥n).
- **Tecnolog√≠as:** Express.js, Multer (uploads), csv-parser (parsing), Supabase JS Client, CORS.
- **Estructura de archivos:**
  ```
  lumen-train-backend/
  ‚îú‚îÄ‚îÄ src/
  ‚îÇ   ‚îú‚îÄ‚îÄ index.js          # Servidor principal
  ‚îÇ   ‚îú‚îÄ‚îÄ routes/
  ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ upload.js     # Rutas de API
  ‚îÇ   ‚îî‚îÄ‚îÄ config/
  ‚îÇ       ‚îî‚îÄ‚îÄ supabase.js   # Cliente Supabase
  ‚îú‚îÄ‚îÄ uploads/              # Archivos temporales (gitignore)
  ‚îú‚îÄ‚îÄ .env                  # Variables de entorno
  ‚îú‚îÄ‚îÄ package.json          # Dependencias
  ‚îî‚îÄ‚îÄ README.md             # Este archivo
  ```

## Prerrequisitos
- **Node.js:** v18 o superior ([descargar](https://nodejs.org/)).
- **npm:** Incluido con Node.js (o usa yarn).
- **Cuenta en Supabase:** Gratuita. Crea un proyecto en [supabase.com](https://supabase.com) y obt√©n las credenciales (URL y service_role key).
- **Git:** Para clonar el repo.

## Instalaci√≥n
1. **Clona el repositorio:**
   ```
   git clone https://github.com/alejandro586/lumen-train.git
   cd lumen-train/backend  # O la rama donde est√© el backend (ej: git checkout backend-supabase-branch)
   ```

2. **Instala dependencias:**
   ```
   npm install
   ```
   - Esto instala Express, Multer, csv-parser, @supabase/supabase-js, CORS, dotenv y nodemon (dev).

3. **Configura variables de entorno:**
   - Crea un archivo `.env` en la ra√≠z (c√≥pialo de un ejemplo si hay, o crea manual):
     ```
     SUPABASE_URL=https://tu-proyecto.supabase.co
     SUPABASE_KEY=tu-service-role-key  # De Supabase > Settings > API
     PORT=5000  # Puerto opcional
     ```
   - **¬°Importante!** Nunca subas `.env` a Git (est√° en .gitignore). Usa la **service_role key** para admin (ignora RLS).

4. **Configura Supabase (una vez):**
   - En Supabase Dashboard > SQL Editor, ejecuta:
     ```sql
     CREATE TABLE public.usuarios (
         id SERIAL PRIMARY KEY,
         nombre TEXT NOT NULL,
         edad INTEGER,
         email TEXT UNIQUE,
         created_at TIMESTAMP DEFAULT NOW()
     );

     -- Pol√≠tica RLS para inserts p√∫blicos (opcional)
     CREATE POLICY "allow_public_inserts" ON public.usuarios
     AS PERMISSIVE FOR INSERT TO public WITH CHECK (true);
     ```
   - Activa Row Level Security en la tabla si usas auth.

## Correr el Proyecto Localmente
1. **Desarrollo (con hot-reload):**
   ```
   npm run dev
   ```
   - Corre en `http://localhost:5000`. Nodemon reinicia autom√°ticamente.

2. **Producci√≥n:**
   ```
   npm start
   ```

3. **Verificar:**
   - Abre `http://localhost:5000` en el navegador (debe mostrar un error 404 o mensaje simple ‚Äì confirma que corre).
   - Prueba el endpoint con Postman o curl:
     ```
     # Upload CSV (usa un archivo test.csv)
     curl -X POST http://localhost:5000/api/upload-csv -F "csvFile=@test.csv"
     ```

## Uso de la API
- **POST /api/upload-csv:** Sube un CSV (multipart/form-data, campo `csvFile`).
  - Headers esperados: `nombre,edad,email`.
  - Respuesta: `{ message: "Se guardaron X registros", data: [...] }`.
- **GET /api/get-usuarios:** Lista √∫ltimos 10 registros.
  - Respuesta: Array de objetos de `usuarios`.

Ejemplo de CSV de prueba (`test.csv`):
```
nombre,edad,email
Ana,28,ana@email.com
Luis,35,luis@email.com
```

## Integraci√≥n con Frontend
- Configura CORS en `src/index.js` para tu puerto frontend (ej: `origin: 'http://localhost:8080'`).
- En el frontend, usa Axios para POST a `http://localhost:5000/api/upload-csv`.

## Troubleshooting
| Problema | Soluci√≥n |
|----------|----------|
| "Port occupied" | Cambia `PORT` en `.env` (ej: 5001). |
| "Supabase: Invalid URL" | Verifica `SUPABASE_URL` (debe ser HTTPS completa). |
| "Column not found (PGRST204)" | Recrear tabla en Supabase; aseg√∫rate de headers exactos en CSV. |
| "CORS error" | Ajusta `origin` en CORS; reinicia backend. |
| "No file uploaded" | Verifica FormData en frontend (`append('csvFile', file)`). |
| Dependencias faltantes | `npm install` de nuevo; chequea `package.json`. |

- **Logs:** Revisa la terminal para errores (ej: `console.error` en upload.js).
- **Debug:** Agrega `console.log` en rutas para ver datos parseados.

## Despliegue
- **Vercel/Render:** Gratuito. Conecta GitHub, agrega vars `.env` en dashboard.
- **Heroku:** `heroku create`, `git push heroku main`.
- Actualiza URLs en frontend para producci√≥n (ej: `https://tu-backend.vercel.app/api`).

## Contribuir
- Forkea el repo, crea rama (`git checkout -b mi-feature`), commit y PR.
- Usa ESLint/Prettier para c√≥digo limpio.

## Licencia
MIT License ‚Äì Ver [LICENSE](LICENSE) (agrega uno si no hay).

---

¬°Gracias por usar Lumen-Train Backend! Si tienes issues, abre un issue en GitHub. üöÄ

*√öltima actualizaci√≥n: Octubre 2025*